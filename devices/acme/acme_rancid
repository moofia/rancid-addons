#! /usr/bin/perl

# a modified version of a standard cisco rancid parser changed to work for acme devices.
#
# debug with:
#
# clogin -t 90 -c"show version;show version image;show version boot;show prom-info all;show features;show power;show directory *;show configuration"
# 
# debug with:
#
# acme_rancid -d device
#
# usage: acme_rancid [-dV] [-l] [-f filename | hostname]

use Getopt::Std;
getopts('dflV');
if ($opt_V) {
  print "acme_rancid 2.3.6\n";
  exit(0);
  }
$log           = $opt_l;
$debug         = $opt_d;
$file          = $opt_f;
$host          = $ARGV[0];
$ios           = "IOS";
$clean_run     = 0;
$found_end     = 0;
$found_version = 0;
$found_env     = 0;
$found_diag    = 0;
$timeo         = 90;         # clogin timeout in seconds

my ( @commandtable, %commands, @commands );    # command lists
my ($aclsort) = ("ipsort");                    # ACL sorting mode
my ($filter_commstr);                          # SNMP community string filtering
my ($filter_pwds);                             # password filtering mode

# This routine is used to print out the router configuration
sub ProcessHistory {
  my ( $new_hist_tag, $new_command, $command_string, @string ) = (@_);
  if (    ( ( $new_hist_tag ne $hist_tag ) || ( $new_command ne $command ) )
       && (%history) )
  {
    print eval "$command \%history";
    undef %history;
    } ## end if ( ( ( $new_hist_tag...)))
  if ( ($new_hist_tag) && ($new_command) && ($command_string) ) {
    if ( $history{$command_string} ) {
      $history{$command_string} = "$history{$command_string}@string";
    } else {
      $history{$command_string} = "@string";
      }
  } elsif ( ($new_hist_tag) && ($new_command) ) {
    $history{++$#history} = "@string";
  } else {
    print "@string";
    }
  $hist_tag = $new_hist_tag;
  $command  = $new_command;
  1;
  } ## end sub ProcessHistory

sub numerically { $a <=> $b; }

# This is a sort routine that will sort numerically on the
# keys of a hash as if it were a normal array.
sub keynsort {
  local (%lines) = @_;
  local ($i)     = 0;
  local (@sorted_lines);
  foreach $key ( sort numerically keys(%lines) ) {
    $sorted_lines[$i] = $lines{$key};
    $i++;
    }
  @sorted_lines;
  } ## end sub keynsort

# This is a sort routine that will sort on the
# keys of a hash as if it were a normal array.
sub keysort {
  local (%lines) = @_;
  local ($i)     = 0;
  local (@sorted_lines);
  foreach $key ( sort keys(%lines) ) {
    $sorted_lines[$i] = $lines{$key};
    $i++;
    }
  @sorted_lines;
  } ## end sub keysort

# This is a sort routine that will sort on the
# values of a hash as if it were a normal array.
sub valsort {
  local (%lines) = @_;
  local ($i)     = 0;
  local (@sorted_lines);
  foreach $key ( sort values %lines ) {
    $sorted_lines[$i] = $key;
    $i++;
    }
  @sorted_lines;
  } ## end sub valsort

# This is a numerical sort routine (ascending).
sub numsort {
  local (%lines) = @_;
  local ($i)     = 0;
  local (@sorted_lines);
  foreach $num ( sort { $a <=> $b } keys %lines ) {
    $sorted_lines[$i] = $lines{$num};
    $i++;
    }
  @sorted_lines;
  } ## end sub numsort

# This is a sort routine that will sort on the
# ip address when the ip address is anywhere in
# the strings.
sub ipsort {
  local (%lines) = @_;
  local ($i)     = 0;
  local (@sorted_lines);
  foreach $addr ( sort sortbyipaddr keys %lines ) {
    $sorted_lines[$i] = $lines{$addr};
    $i++;
    }
  @sorted_lines;
  } ## end sub ipsort

# These two routines will sort based upon IP addresses
sub ipaddrval {
  my (@a) = ( $_[0] =~ m#^(\d+)\.(\d+)\.(\d+)\.(\d+)$# );
  $a[3] + 256 * ( $a[2] + 256 * ( $a[1] + 256 * $a[0] ) );
  }

sub sortbyipaddr {
  &ipaddrval($a) <=> &ipaddrval($b);
  }

# parse the command "show version"
sub ShowVersion {
  print STDERR "    In ShowVersion: $_" if ($debug);
  s/^[a-z]+@//;
  ProcessHistory( "", "", "", "# $_" );
  while (<INPUT>) {
    tr/\015//d;
    last if (/^$prompt/);
    ProcessHistory( "", "", "", "# $_" );
    }
  return (0);
  } ## end sub ShowVersion

# parse the command "show version image"
sub ShowVersionImage {
  print STDERR "    In ShowVersionImage: $_" if ($debug);
  s/^[a-z]+@//;
  ProcessHistory( "", "", "", "# $_" );
  while (<INPUT>) {
    tr/\015//d;
    last if (/^$prompt/);
    ProcessHistory( "", "", "", "# $_" );
    }
  return (0);
  } ## end sub ShowVersionImage

# parse the command "show version boot"
sub ShowVersionBoot {
  print STDERR "    In ShowVersionBoot: $_" if ($debug);
  s/^[a-z]+@//;
  ProcessHistory( "", "", "", "# $_" );
  while (<INPUT>) {
    tr/\015//d;
    last if (/^$prompt/);
    ProcessHistory( "", "", "", "# $_" );
    }
  return (0);
  } ## end sub ShowVersionBoot

# parse the command "show prom-info all"
sub ShowPromInfo {
  print STDERR "    In ShowPromInfo: $_" if ($debug);
  s/^[a-z]+@//;
  ProcessHistory( "", "", "", "# $_" );
  while (<INPUT>) {
    tr/\015//d;
    last if (/^$prompt/);
    ProcessHistory( "", "", "", "# $_" );
    }
  return (0);
  } ## end sub ShowPromInfo

# parse the command "show features"
sub ShowFeatures {
  print STDERR "    In ShowFeatures: $_" if ($debug);
  s/^[a-z]+@//;
  ProcessHistory( "", "", "", "# $_" );
  while (<INPUT>) {
    tr/\015//d;
    last if (/^$prompt/);
    ProcessHistory( "", "", "", "# $_" );
    }
  return (0);
  } ## end sub ShowFeatures

# parse the command "show power"
sub ShowPower {
  print STDERR "    In ShowPower: $_" if ($debug);
  s/^[a-z]+@//;
  ProcessHistory( "", "", "", "# $_" );
  while (<INPUT>) {
    tr/\015//d;
    last if (/^$prompt/);
    ProcessHistory( "", "", "", "# $_" );
    }
  return (0);
  } ## end sub ShowPower

# parse the command "show directory *"
sub ShowDirectory {
  print STDERR "    In ShowDirectory: $_" if ($debug);
  s/^[a-z]+@//;
  ProcessHistory( "", "", "", "# $_" );
  while (<INPUT>) {
    tr/\015//d;
    last if (/^$prompt/);
    ProcessHistory( "", "", "", "# $_" );
    }
  return (0);
  } ## end sub ShowDirectory

# This routine parses "show configuration"
sub ShowConfiguration {
  print STDERR "    In ShowConfiguration: $_" if ($debug);
  my ( $lineauto, $comment, $linecnt ) = ( 0, 0, 0 );

  ProcessHistory( "", "", "", "# $_" );

  while (<INPUT>) {
    tr/\015//d;
    tr/\015//d;
    return (1)  if /Line has invalid autocommand /;
    return (1)  if (/(Invalid input detected|Type help or )/i);
    return (0)  if ($found_end);                                  # Only do this routine once
    return (-1) if (/command authorization failed/i);

    $linecnt++;
    $lineauto = 0 if (/^[^ ]/);

    # convert blank lines to comments
    s/^$/#/g;

    # skip consecutive comment lines to avoid oscillating extra comment
    # line on some access servers.  grrr.
    if (/^#/) {
      next if ($comment);
      ProcessHistory( "", "", "", $_ );
      $comment++;
      next;
      } ## end if (/^#/)
    $comment = 0;

    # process everything. as this was based on rancid nothing acme related or like a acme is being parsed here.
    ProcessHistory( "", "", "", "$_" );

    # end of config when "task done" is found
    if (/^task done/) {
      $found_end = 1;
      return (0);
      }
    } ## end while (<INPUT>)

  return (0);
  } ## end sub ShowConfiguration

# dummy function
sub DoNothing { print STDOUT; }

# Main
@commandtable = (
                  {'show version'       => 'ShowVersion'},
                  {'show version image' => 'ShowVersionImage'},
                  {'show version boot'  => 'ShowVersionBoot'},
                  {'show prom-info all' => 'ShowPromInfo'},
                  {'show features'      => 'ShowFeatures'},
                  {'show power'         => 'ShowPower'},
                  {'show directory *'   => 'ShowDirectory'},
                  {'show configuration' => 'ShowConfiguration'}
                  );

# Use an array to preserve the order of the commands and a hash for mapping
# commands to the subroutine and track commands that have been completed.
@commands = map( keys(%$_), @commandtable );
%commands = map( %$_,       @commandtable );

$acme_cmds   = join( ";", @commands );
$cmds_regexp = join( "|", @commands );

if ( length($host) == 0 ) {
  if ($file) {
    print( STDERR "Too few arguments: file name required\n" );
    exit(1);
  } else {
    print( STDERR "Too few arguments: host name required\n" );
    exit(1);
    }
  } ## end if ( length($host) == ...)
open( OUTPUT, ">$host.new" ) || die "Can't open $host.new for writing: $!\n";
select(OUTPUT);

# make OUTPUT unbuffered if debugging
if ($debug) { $| = 1; }

if ($file) {
  print STDERR "opening file $host\n" if ($debug);
  print STDOUT "opening file $host\n" if ($log);
  open( INPUT, "<$host" ) || die "open failed for $host: $!\n";
} else {
  print STDERR "executing clogin -t $timeo -c\"$acme_cmds\" $host\n" if ($debug);
  print STDOUT "executing clogin -t $timeo -c\"$acme_cmds\" $host\n" if ($log);
  if ( defined( $ENV{NOPIPE} ) ) {
    system "clogin -t $timeo -c \"$acme_cmds\" $host </dev/null > $host.raw 2>&1"
      || die "clogin failed for $host: $!\n";
    open( INPUT, "< $host.raw" ) || die "clogin failed for $host: $!\n";
  } else {
    open( INPUT, "clogin -t $timeo -c \"$acme_cmds\" $host </dev/null |" ) || die "clogin failed for $host: $!\n";
    }
  } ## end else [ if ($file) ]

# determine ACL sorting mode
if ( $ENV{"ACLSORT"} =~ /no/i ) {
  $aclsort = "";
  }

# determine community string filtering mode
if ( defined( $ENV{"NOCOMMSTR"} )
     && ( $ENV{"NOCOMMSTR"} =~ /yes/i || $ENV{"NOCOMMSTR"} =~ /^$/ ) )
{
  $filter_commstr = 1;
} else {
  $filter_commstr = 0;
  }

# determine password filtering mode
if ( $ENV{"FILTER_PWDS"} =~ /no/i ) {
  $filter_pwds = 0;
} elsif ( $ENV{"FILTER_PWDS"} =~ /all/i ) {
  $filter_pwds = 2;
} else {
  $filter_pwds = 1;
  }

# command cleanup if a wildcard is used in a command
$cmds_regexp =~ s/\*/\\*/g;

ProcessHistory( "",         "",        "",   "#RANCID-CONTENT-TYPE: acme\n#\n" );
ProcessHistory( "COMMENTS", "keysort", "B0", "#\n" );
ProcessHistory( "COMMENTS", "keysort", "D0", "#\n" );
ProcessHistory( "COMMENTS", "keysort", "F0", "#\n" );
ProcessHistory( "COMMENTS", "keysort", "G0", "#\n" );
TOP: while (<INPUT>) {
  tr/\015//d;
  s/\s+$/\n/g;
  if (/[>#]\s?exit/) {
    $clean_run = 1;
    last;
    }
  if (/^Error:/) {
    print STDOUT ("$host clogin error: $_");
    print STDERR ("$host clogin error: $_") if ($debug);
    $clean_run = 0;
    last;
    } ## end if (/^Error:/)

  while (/[>#]\s*($cmds_regexp)\s*$/) {
    $cmd = $1;
    if ( !defined($prompt) ) {
      $prompt = ( $_ =~ /^([^#>]+[#>])/ )[0];
      $prompt =~ s/([][}{)(\\])/\\$1/g;

      print STDERR ("PROMPT MATCH: $prompt\n") if ($debug);
      } ## end if ( !defined($prompt))
    print STDERR ("HIT COMMAND:$_") if ($debug);
    if ( !defined( $commands{$cmd} ) ) {
      print STDERR "$host: found unexpected command - \"$cmd\"\n";
      $clean_run = 0;
      last TOP;
      }
    $rval = &{$commands{$cmd}};
    ProcessHistory( "", "", "", "#\n" );
    delete( $commands{$cmd} );
    if ( $rval == -1 ) {
      $clean_run = 0;
      last TOP;
      }
    } ## end while (/[>#]\s*($cmds_regexp)\s*$/)
  } ## end TOP: while (<INPUT>)
print STDOUT "Done $logincmd: $_\n" if ($log);

# Flush History
ProcessHistory( "", "", "", "" );

# Cleanup
close(INPUT);
close(OUTPUT);

if ( defined( $ENV{NOPIPE} ) ) {
  unlink("$host.raw") if ( !$debug );
  }

# check for completeness
if ( scalar(%commands) || !$clean_run || !$found_end ) {
  if ( scalar(%commands) ) {
    printf( STDOUT "$host: missed cmd(s): %s\n", join( ',', keys(%commands) ) );
    printf( STDERR "$host: missed cmd(s): %s\n", join( ',', keys(%commands) ) ) if ($debug);
    }
  if ( !$clean_run || !$found_end ) {
    print STDOUT "$host: End of run not found\n";
    print STDERR "$host: End of run not found\n" if ($debug);
    system("/usr/bin/tail -1 $host.new");
    }
  unlink "$host.new" if ( !$debug );
  } ## end if ( scalar(%commands)...)
